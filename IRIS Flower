{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9997247,"sourceType":"datasetVersion","datasetId":6153146}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**PIYUSH CHAUHAN B.TECH CSE 3RD YEAR**","metadata":{}},{"cell_type":"markdown","source":"# Objective: The objective is to build and evaluate a logistic regression model using the Iris dataset to classify species based on features, emphasizing exploration and visualization.","metadata":{}},{"cell_type":"markdown","source":"# Q1: Data Loading and Exploration","metadata":{}},{"cell_type":"markdown","source":"**Import Libraries**","metadata":{}},{"cell_type":"code","source":"# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:09:27.404646Z","iopub.execute_input":"2024-11-24T07:09:27.405052Z","iopub.status.idle":"2024-11-24T07:09:31.037069Z","shell.execute_reply.started":"2024-11-24T07:09:27.405015Z","shell.execute_reply":"2024-11-24T07:09:31.035492Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Load the Iris dataset from sklearn.**","metadata":{}},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/irisflowerdatasett/IRIS.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:11:20.315303Z","iopub.execute_input":"2024-11-24T07:11:20.315735Z","iopub.status.idle":"2024-11-24T07:11:20.336302Z","shell.execute_reply.started":"2024-11-24T07:11:20.315684Z","shell.execute_reply":"2024-11-24T07:11:20.335037Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"iris = load_iris()\nX = iris.data  # Features\ny = iris.target  # Target variable","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:11:22.855000Z","iopub.execute_input":"2024-11-24T07:11:22.855486Z","iopub.status.idle":"2024-11-24T07:11:22.864376Z","shell.execute_reply.started":"2024-11-24T07:11:22.855439Z","shell.execute_reply":"2024-11-24T07:11:22.862546Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Display the first few rows of the dataset.**","metadata":{}},{"cell_type":"code","source":"# Display the first few rows of the dataset\nprint(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:11:25.084834Z","iopub.execute_input":"2024-11-24T07:11:25.085254Z","iopub.status.idle":"2024-11-24T07:11:25.104623Z","shell.execute_reply.started":"2024-11-24T07:11:25.085217Z","shell.execute_reply":"2024-11-24T07:11:25.103247Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Explore the dataset to understand features and target variable\nprint(df.info())\nprint(df.describe())\n\n# Visualize the target variable distribution\nsns.countplot(x='species', data=df)\nplt.title('Distribution of Species in the Dataset')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:11:48.261398Z","iopub.execute_input":"2024-11-24T07:11:48.261782Z","iopub.status.idle":"2024-11-24T07:11:48.565646Z","shell.execute_reply.started":"2024-11-24T07:11:48.261748Z","shell.execute_reply":"2024-11-24T07:11:48.564540Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Q2: Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"**Split the dataset into training and testing sets.**","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Split the dataset into features (X) and target (y)\nX = df.drop('species', axis=1)\ny = df['species']\n\n# Split into training and testing sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:12:33.675164Z","iopub.execute_input":"2024-11-24T07:12:33.675575Z","iopub.status.idle":"2024-11-24T07:12:33.795204Z","shell.execute_reply.started":"2024-11-24T07:12:33.675537Z","shell.execute_reply":"2024-11-24T07:12:33.794010Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Scale the features using StandardScaler from sklearn.**","metadata":{}},{"cell_type":"code","source":"# Scale the features using StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:12:56.033293Z","iopub.execute_input":"2024-11-24T07:12:56.033840Z","iopub.status.idle":"2024-11-24T07:12:56.046570Z","shell.execute_reply.started":"2024-11-24T07:12:56.033792Z","shell.execute_reply":"2024-11-24T07:12:56.044953Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Visualizing Feature Relationships**","metadata":{}},{"cell_type":"code","source":"# Pairplot to visualize the relationship between features\nsns.pairplot(df, hue='species', markers=[\"o\", \"s\", \"D\"])\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:13:20.447834Z","iopub.execute_input":"2024-11-24T07:13:20.448291Z","iopub.status.idle":"2024-11-24T07:13:25.956774Z","shell.execute_reply.started":"2024-11-24T07:13:20.448250Z","shell.execute_reply":"2024-11-24T07:13:25.955407Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Q3: Model Training","metadata":{}},{"cell_type":"markdown","source":"**Import the Logistic Regression model from sklearn.**","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:14:27.505005Z","iopub.execute_input":"2024-11-24T07:14:27.505409Z","iopub.status.idle":"2024-11-24T07:14:27.615074Z","shell.execute_reply.started":"2024-11-24T07:14:27.505374Z","shell.execute_reply":"2024-11-24T07:14:27.613946Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Train the model using the training data.**","metadata":{}},{"cell_type":"code","source":"# Create and train the Logistic Regression model\nmodel = LogisticRegression(max_iter=200)\nmodel.fit(X_train_scaled, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:14:53.356051Z","iopub.execute_input":"2024-11-24T07:14:53.356468Z","iopub.status.idle":"2024-11-24T07:14:53.384119Z","shell.execute_reply.started":"2024-11-24T07:14:53.356429Z","shell.execute_reply":"2024-11-24T07:14:53.382791Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Model Coefficients:\", model.coef_)\nprint(\"Model Intercept:\", model.intercept_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:15:05.695152Z","iopub.execute_input":"2024-11-24T07:15:05.696387Z","iopub.status.idle":"2024-11-24T07:15:05.703857Z","shell.execute_reply.started":"2024-11-24T07:15:05.696330Z","shell.execute_reply":"2024-11-24T07:15:05.702676Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Q4: Model Prediction","metadata":{}},{"cell_type":"markdown","source":"**Predict the target values for the testing set.**","metadata":{}},{"cell_type":"code","source":"# Predict the target values for the testing set\ny_pred = model.predict(X_test_scaled)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:15:42.804783Z","iopub.execute_input":"2024-11-24T07:15:42.805756Z","iopub.status.idle":"2024-11-24T07:15:42.811268Z","shell.execute_reply.started":"2024-11-24T07:15:42.805703Z","shell.execute_reply":"2024-11-24T07:15:42.809977Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Display the predicted values.**","metadata":{}},{"cell_type":"code","source":"\n\n# Display the predicted values\nprint(\"Predicted Species:\", y_pred)\nprint(\"Actual Species:\", np.array(y_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:16:14.324662Z","iopub.execute_input":"2024-11-24T07:16:14.325094Z","iopub.status.idle":"2024-11-24T07:16:14.332601Z","shell.execute_reply.started":"2024-11-24T07:16:14.325059Z","shell.execute_reply":"2024-11-24T07:16:14.331279Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Q5: Model Evaluation","metadata":{}},{"cell_type":"markdown","source":"**Import evaluation metrics from sklearn.**","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:17:08.316755Z","iopub.execute_input":"2024-11-24T07:17:08.317284Z","iopub.status.idle":"2024-11-24T07:17:08.323225Z","shell.execute_reply.started":"2024-11-24T07:17:08.317234Z","shell.execute_reply":"2024-11-24T07:17:08.321689Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculate and display the accuracy score\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy Score: {accuracy * 100:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:17:19.285231Z","iopub.execute_input":"2024-11-24T07:17:19.285667Z","iopub.status.idle":"2024-11-24T07:17:19.293415Z","shell.execute_reply.started":"2024-11-24T07:17:19.285630Z","shell.execute_reply":"2024-11-24T07:17:19.292182Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Generate and display the confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", conf_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:17:27.225037Z","iopub.execute_input":"2024-11-24T07:17:27.225439Z","iopub.status.idle":"2024-11-24T07:17:27.233715Z","shell.execute_reply.started":"2024-11-24T07:17:27.225403Z","shell.execute_reply":"2024-11-24T07:17:27.232437Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Visualize the confusion matrix using a heatmap\nplt.figure(figsize=(6, 4))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:17:34.964919Z","iopub.execute_input":"2024-11-24T07:17:34.965471Z","iopub.status.idle":"2024-11-24T07:17:35.272534Z","shell.execute_reply.started":"2024-11-24T07:17:34.965423Z","shell.execute_reply":"2024-11-24T07:17:35.270921Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Generate and display the classification report.**","metadata":{}},{"cell_type":"code","source":"# Generate and display the classification report\nclass_report = classification_report(y_test, y_pred, target_names=iris.target_names)\nprint(\"Classification Report:\\n\", class_report)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-24T07:17:59.144036Z","iopub.execute_input":"2024-11-24T07:17:59.144444Z","iopub.status.idle":"2024-11-24T07:17:59.162892Z","shell.execute_reply.started":"2024-11-24T07:17:59.144407Z","shell.execute_reply":"2024-11-24T07:17:59.161730Z"}},"outputs":[],"execution_count":null}]}